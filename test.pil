# File generated by peppercorn-v1.1.1

# Domains (8) 
sequence key = CAA : 3
sequence key* = TTG : 3
sequence one = TATTAGGC : 8
sequence one* = GCCTAATA : 8
sequence reg0 = CTGTCTGAGGATCTTTACCGCAACCAATGG : 30
sequence reg0* = CCATTGGTTGCGGTAAAGATCCTCAGACAG : 30
sequence reg1 = GTTTGCTGACTTTCTTGGCTACGACGGGAG : 30
sequence reg1* = CTCCCGTCGTAGCCAAGAAAGTCAGCAAAC : 30

# Input strands or composite domains (7) 
sup-sequence data0_1s = one reg0 one
sup-sequence data1_1s = one reg1 one
sup-sequence stripper_1_1 = one* reg1* key* key* reg0* one*
sup-sequence cleaner = reg0 key key reg1
sup-sequence backbone = reg1* reg0*
sup-sequence data0_0s = zero reg0 zero
sup-sequence data1_0s = zero reg1 zero

# Resting complexes (15) 
cData0 = one reg0 one
success_match = one( reg0( one + one reg1( one( + ) ) key* key* ) )
failure_match = one reg0( one + one reg1( one + ) )
e321 = one*( reg1* key* key* reg0*( one*( + ) ) )
e286 = one* reg1* key* key* reg0*( one*( + ) ) one
e220 = reg1* reg0*( + one ) one
cData1 = one reg1 one
e326 = one*( reg1*( key* key* reg0* one*( + ) ) )
e280 = one*( reg1*( key* key* reg0* one* + one ) )
e218 = reg1*( reg0* + one ) one
cStrip = one* reg1* key* key* reg0* one*
e18 = reg0( key( key( reg1( + one* ) ) ) ) one*
cCleaner = reg0 key key reg1
cleaner_backbone = reg0( key key reg1( + ) )
cBackbone = reg1* reg0*

# Resting macrostates (13) 
macrostate cData0 = [cData0]
macrostate success_match = [success_match]
macrostate failure_match = [failure_match]
macrostate e321 = [e321, e286]
macrostate e220 = [e220]
macrostate cData1 = [cData1]
macrostate e326 = [e280, e326]
macrostate e218 = [e218]
macrostate cStrip = [cStrip]
macrostate e18 = [e18]
macrostate cCleaner = [cCleaner]
macrostate cleaner_backbone = [cleaner_backbone]
macrostate cBackbone = [cBackbone]

# Condensed reactions (24) 
reaction [condensed    = 1.02931e-06 /nM/s ] cData0 + e326 -> success_match
reaction [condensed    =      0.009 /nM/s ] cData0 + e218 -> failure_match
reaction [condensed    =  0.0184128 /nM/s ] cData0 + cStrip -> e321
reaction [condensed    =      0.009 /nM/s ] cData0 + cBackbone -> e220
reaction [condensed    = 0.00625199 /nM/s ] success_match + cStrip -> e321 + e326
reaction [condensed    = 0.00181908 /nM/s ] success_match + cCleaner -> cData0 + cData1 + e18
reaction [condensed    = 2.48132e-07 /nM/s ] failure_match + e321 -> success_match + e220
reaction [condensed    = 2.48132e-07 /nM/s ] failure_match + e326 -> success_match + e218
reaction [condensed    = 0.00909272 /nM/s ] failure_match + cStrip -> e321 + e218
reaction [condensed    = 0.00909272 /nM/s ] failure_match + cStrip -> e220 + e326
reaction [condensed    = 1.02931e-06 /nM/s ] e321 + cData1 -> success_match
reaction [condensed    = 1.79406e-07 /nM/s ] e321 + e218 -> success_match + cBackbone
reaction [condensed    = 8.79685e-07 /nM/s ] e321 + cCleaner -> cData0 + e18
reaction [condensed    =      0.009 /nM/s ] e220 + cData1 -> failure_match
reaction [condensed    = 1.79406e-07 /nM/s ] e220 + e326 -> success_match + cBackbone
reaction [condensed    = 0.00738962 /nM/s ] e220 + cStrip -> e321 + cBackbone
reaction [condensed    =      0.009 /nM/s ] e220 + cCleaner -> cData0 + cleaner_backbone
reaction [condensed    =  0.0184128 /nM/s ] cData1 + cStrip -> e326
reaction [condensed    =      0.009 /nM/s ] cData1 + cBackbone -> e218
reaction [condensed    = 8.79685e-07 /nM/s ] e326 + cCleaner -> cData1 + e18
reaction [condensed    = 0.00738962 /nM/s ] e218 + cStrip -> e326 + cBackbone
reaction [condensed    =      0.009 /nM/s ] e218 + cCleaner -> cData1 + cleaner_backbone
reaction [condensed    =  0.0209444 /nM/s ] cStrip + cCleaner -> e18
reaction [condensed    =      0.018 /nM/s ] cCleaner + cBackbone -> cleaner_backbone
